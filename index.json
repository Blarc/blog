[{"content":"AI Commits IntelliJ Plugin is an IntelliJ IDEA plugin that generates commit messages using git diff and large language models (LLMs). The idea came to me at the start of the LLM hype when I noticed my colleague\u0026rsquo;s commit messages at work were completely non-descriptive‚Äîusually just one word. That\u0026rsquo;s when I thought maybe an LLM could write better commit messages, and I did what I usually do: I googled for existing solutions.\nMotivation # At the time, a popular project for generating commits with LLM help was AI commits. This seemed promising, but I wanted something that better integrated with our development environment‚Äîspecifically, something that integrated with the IDE we use: IntelliJ IDEA. I checked the issues on the AI commits project and found an open issue for an IntelliJ plugin. Since I had some experience building IntelliJ plugins already and because other people showed interest in the issue, I started the project myself.\nOpen issue on AI commits project. (full size) [‚òæ/‚òº] Open issue on AI commits project. (full size) [‚òæ/‚òº] First implementation # At the time, the main LLM provider was Open AI. Applications could integrate with it via a REST API. I didn\u0026rsquo;t want to implement the client from scratch (like I did with GitLab Template Lint Plugin) and found a promising client implementation written in Kotlin: openai-kotlin. I\u0026rsquo;ve implemented a simple settings UI where the users could set the OpenAI token and the locale and added an action to the commit dialog that ran the command git diff and sent the request to the LLM. The prompt for the LLM was hardcoded to:\nWrite an insightful but concise Git commit message in a complete sentence in present tense for the following diff without prefacing it with anything, the response must be in the language {locale}: {diff} Demo of the early version. (full size) [‚òæ/‚òº] Demo of the early version. (full size) [‚òæ/‚òº] IntelliJ IDEA vs Git diff # In IntelliJ IDEA the commit dialog allows users to decide what they would like to commit. The user can decide for each file and even for each line of code that was changed, whether to commit it or not. The git diff approach I used, always retrieved the whole diff, even if the user didn\u0026rsquo;t want to commit all the changes.\nSo I\u0026rsquo;ve dug into IntelliJ API and found a way to retrieve only the changes that were selected by the user in the commit dialog. The solution was in getting the commitWorkflowHandler from the action data context which could then be used to retrieve the included changes.\nPrompts # Hardcoding the prompt was not ideal, since users can have different preferences how the commit message should look. That is why the next step was adding a table to settings for configuring different prompts.\nPrompts table. (full size) [‚òæ/‚òº] Prompts table. (full size) [‚òæ/‚òº] It was soon clear that the prompts should support more variables that are dynamically evaluated before the request is sent to the LLM. The first addition to existing {locale} and {diff} was {branch}, which resolves to the current Git branch and in the case of multiple repositories to the most common Git branch. Later on, I\u0026rsquo;ve added:\nhint: resolves to the text that was in the commit message text field before running the action taskId: ID of the task from the IntelliJ tasks tracker taskSummary: summary of the task taskDescription: description of the task taskTimeSpent: time spent on the task Prompt edit. (full size) [‚òæ/‚òº] Prompt edit. (full size) [‚òæ/‚òº] LangChain4j \u0026#x1f99c; # After the first release of OpenAI, new LLM providers soon began to appear. For some providers, the same API client worked since their API was the same as OpenAI, but for many this was not true. This is when I learned about langchain4j a Java library of LLM provider clients that is an alternative to the Python library langchain.\nThe library contains clients for a lot of different LLM providers and offers a unified interface for all of them. This allowed me to refactor the code in a way that makes adding new clients much easier. For each client I need to add four classes:\nconfiguration: extends the LLMClientConfiguration class and contains the configuration properties for the client. panel: extends the LLMClientPanel class and implements the UI for configuring the client. service: extends the LLMClientService class and provides methods for building the client. sharedState: extends the LLMClientSharedState class and enables persisting data shared between the clients of the same type. I\u0026rsquo;ve also added a new settings table where the users can configure LLM client configurations:\nConfigurations table. (full size) [‚òæ/‚òº] Configurations table. (full size) [‚òæ/‚òº] Add or edit configuration. (full size) [‚òæ/‚òº] Add or edit configuration. (full size) [‚òæ/‚òº] Conclusion # The AI Commits IntelliJ plugin has been fun to build. I\u0026rsquo;ve learned a lot of new stuff regarding IntelliJ platform, Gradle build system, LLMs, Kotlin coroutines, Kotlin UI DSL and plugin design. The plugin has a decent user base that provides feedback and ideas for new features. This way the plugin is constantly evolving and improving. If you\u0026rsquo;d like to check it out, you can find it on JetBrains Marketplace and if you like it, you can star it on GitHub.\n","date":"2025 April 1","externalUrl":null,"permalink":"/blog/articles/2025/07/ai-commits-intellij-plugin/","section":"Articles","summary":"","title":"AI Commits IntelliJ Plugin","type":"articles"},{"content":"","date":"2025 April 1","externalUrl":null,"permalink":"/blog/articles/","section":"Articles","summary":"","title":"Articles","type":"articles"},{"content":"","date":"2025 April 1","externalUrl":null,"permalink":"/blog/categories/articles/","section":"Categories","summary":"","title":"Articles","type":"categories"},{"content":"","date":"2025 April 1","externalUrl":null,"permalink":"/blog/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025 April 1","externalUrl":null,"permalink":"/blog/tags/intellij/","section":"Tags","summary":"","title":"Intellij","type":"tags"},{"content":"\nWelcome to my blog üëã\nFeel free to reach out to me on any platform you feel comfortable on, or check out my recent endeavours below ‚§µ\n","date":"2025 April 1","externalUrl":null,"permalink":"/blog/","section":"Jakob Male≈æiƒç","summary":"","title":"Jakob Male≈æiƒç","type":"page"},{"content":"","date":"2025 April 1","externalUrl":null,"permalink":"/blog/tags/plugin/","section":"Tags","summary":"","title":"Plugin","type":"tags"},{"content":"","date":"2025 April 1","externalUrl":null,"permalink":"/blog/categories/posts/","section":"Categories","summary":"","title":"Posts","type":"categories"},{"content":"","date":"2025 April 1","externalUrl":null,"permalink":"/blog/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025 March 29","externalUrl":null,"permalink":"/blog/about/","section":"Abouts","summary":"","title":"Abouts","type":"about"},{"content":"Hi, and welcome! üëã\nI\u0026rsquo;m Jakob, a developer from Slovenia üá∏üáÆ. I\u0026rsquo;ve always been fascinated by how things work. During my second year of college, I started as a backend developer at Medius. It didn‚Äôt take long for me to realize the vast ecosystem of tools and principles that power modern applications. Wanting to understand the bigger picture, I transitioned into a DevOps role.\nSince then, I‚Äôve been on a continuous journey of exploring infrastructure, networking, containerization, orchestration tools, security, and CI/CD‚Äîeverything that makes application development and deployment smoother. My work has primarily involved Bash scripts, GitLab pipelines, Kubernetes, Helm, Kustomize, and Argo CD, along with many other tools. I\u0026rsquo;m always on the lookout for the next tool or Kubernetes operator that can boost developer productivity or reduce maintenance overhead.\nAt the same time, I haven\u0026rsquo;t lost my passion for coding. I love building backends in Java with Quarkus, crafting Android apps and IntelliJ plugins in Kotlin, and occasionally dabbling in Go and Rust. On the frontend side, I‚Äôve explored React and Angular, but there‚Äôs still a lot to learn.\nAlong the way, I‚Äôve come to appreciate simplicity in engineering. The overwhelming number of tools and frameworks can make things unnecessarily complex, which is why I try to follow the KISS principle. I also discovered the wisdom of grug, which is slowly becoming my sacred scroll of truth.\nThis blog is a space where I‚Äôll share my experiences, projects, and insights from my developer journey. Thanks for stopping by‚Äîlet‚Äôs learn and build together! üöÄ\n","date":"2025 March 29","externalUrl":null,"permalink":"/blog/about/bio/","section":"Abouts","summary":"","title":"Bio","type":"about"},{"content":"","externalUrl":null,"permalink":"/blog/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/blog/series/","section":"Series","summary":"","title":"Series","type":"series"}]